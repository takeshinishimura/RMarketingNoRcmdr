---
title: "Rコマンダーを使わずに『現代マーケティング・リサーチ』を読む"
title-block-banner: true
format:
  html:
    toc: true
    toc-title: TOC
    toc_float: true
    toc-depth: 4
    number-sections: false
    theme: united
    code-fold: false
lang: ja
---

[照井伸彦・佐藤忠彦（2022）『現代マーケティング・リサーチ—市場を読み解くデータ分析 新版』有斐閣](https://www.yuhikaku.co.jp/books/detail/9784641166080){target="_blank"} は，Rを用いたマーケティング・リサーチの入門書として位置づけられる。

本書の想定読者は，Rを初めて使用する学生であり，プログラミングに戸惑うことが予想されるため，Rコマンダーを利用して解説している。
しかし，Rに慣れた読者にとっては，Rコマンダーの処理がブラックボックス化されており，かえって分かりにくい。
そこで，本サイトでは，Rコマンダーによって生成されたコードと，それと同じ処理をRに習熟したユーザーが記述する場合のコードを並べて示し，理解を助ける構成としている。

また，本書にはいくつか誤植があり，本書の指示通りに操作を進めると，Rコマンダーの利用において行き詰まる箇所がある。
そのような部分については適宜修正しながら進めることを推奨する。


## 第3章 サンプリング

### 4 単純無作為サンプリング

#### 4.1 Rコマンダーによる乱数表作成

##### ▶ Rコマンダーによって生成されたコード（p. 37）

```{r}
#| eval: false
UniformSamples <- as.data.frame(matrix(runif(1*100, min=0, max=1), ncol=100))
rownames(UniformSamples) <- "sample"
colnames(UniformSamples) <- paste("obs", 1:100, sep="")
```

##### ▶ 手入力するコード

```{r}
#| eval: false
x <- UniformSamples * 100
rx <- round(x) + 1
ux <- unique(rx)
ux[1:10]
```

##### ▶ 一般的なRコード

乱数を生成する際に，あらかじめ `set.seed()` を実行しておくと，同じ操作を繰り返したときに同じ乱数を再現できる。
```{r}
set.seed(100)
```
`set.seed()` のかっこ中の数字は何でもよい。

```{r}
ux <- unique(ceiling(runif(100, min = 0, max = 100)))
ux[1:10]
```
または
```{r}
ux <- sample(1:100, 100, replace = FALSE)
ux[1:10]
```

## 第5章 市場反応分析（I）

### 3 相関分析

#### 3.2 売上と価格のデータ：散布図の作成

::: {.callout-warning collapse="false" icon="false"}
## 誤植

p. 84

- （誤）欠損値はないこと“NA”で表している。
- （正）欠損値を“NA”で表すように設定している。

p. 85

- （誤）小数点の記号がピリオドかカンマの指定もできる。
- （正）小数点の記号をピリオドかカンマに指定できる。

p. 86

- （誤）“売上”を選択し，図5.5のようにそれぞれ反転させる。
- （正）“売上”を選択し，図5.5左のようにそれぞれ青色に反転させる。
:::

##### ▶ Rコマンダーによって生成されたコード（p. 84）

```{r}
#| eval: false
Dataset <- read.table(file.choose(), header=TRUE, stringsAsFactors=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
scatterplot(売上~価格, regLine=FALSE, smooth=FALSE, boxplots=FALSE, data=Dataset)
```

##### ▶ 一般的なRコード

```{r}
#| echo: true
#| eval: false
library(car)

Dataset <- read.csv(file.choose(), header = TRUE, sep = "", strip.white = TRUE)
names(Dataset)[1] <- "売上数量"
```
```{r}
#| echo: false
#| message: false
library(car)

Dataset <- read.csv("../data/現代マーケティング・リサーチ〔新版〕_ウェブサポートデータ/5/sales-price-promo.txt", header = TRUE, sep = "", strip.white = TRUE)

names(Dataset)[1] <- "売上数量"
```

図5.2の縦軸が「売上数量」となっていたため，列名を変更した。
一般的に「売上」は売上高を指すため，価格と売上の相関関係を図示するのはやや不自然である（価格が上がれば，売上数量が一定の場合，売上高も上昇する）。
この点を踏まえると，本書では図が修正されたものの，本文の修正が反映されないまま出版された可能性があると考えられる。
なお，p. 102の本文では「売上数量」と明確に同じ意味で使わる「売上」の記述が見られる。

```{r}
Dataset
scatterplot(売上数量 ~ 価格, regLine = FALSE, smooth = FALSE, boxplots = FALSE, las = 1, data = Dataset)
```

`scatterplot()` は `car` パッケージの関数であるため，最初に `car` パッケージをロードしている。

あるいは，次のように汎用的な作図関数 `plot()` を使ってもよい。
```{r}
#| echo: true
#| eval: false
Dataset <- read.csv(file.choose(), header = TRUE, sep = "", strip.white = TRUE)
names(Dataset)[1] <- "売上数量"

plot(売上数量 ~ 価格, las = 1, data = Dataset)
```
```{r}
#| echo: false
#| message: false
Dataset <- read.csv("../data/現代マーケティング・リサーチ〔新版〕_ウェブサポートデータ/5/sales-price-promo.txt", header = TRUE, sep = "", strip.white = TRUE)
names(Dataset)[1] <- "売上数量"

plot(売上数量 ~ 価格, las = 1, data = Dataset)
```

#### 3.3 売上と価格に相関はあるか：標本相関係数の検定

##### ▶ Rコマンダーによって生成されたコード（p. 87）

```{r}
#| eval: false
with(Dataset, cor.test(価格, 売上, alternative="two.sided", method="pearson"))
```

##### ▶ 一般的なRコード

```{r}
cor.test(Dataset$価格, Dataset$売上数量, alternative = "two.sided", method = "pearson")
```


### 4 売上と価格の市場反応分析：回帰モデル

##### ▶ Rコマンダーによって生成されたコード（p. 91）

```{r}
#| eval: false
RegModel.1 <- lm(売上~価格, data=Dataset)
summary(RegModel.1)
```

##### ▶ 一般的なRコード

```{r}
RegModel_1 <- lm(売上数量 ~ 価格, data = Dataset)
summary(RegModel_1)
```

昔は変数名（先頭ではなく途中）に `.` が使用されることもあったが，最近は使用しないのが一般的である。

#### 4.1 価格反応係数推定値の精度と信頼区間

##### ▶ Rコマンダーによって生成されたコード（p. 93）

```{r}
#| eval: false
Confint(RegModel.1, level=0.95)
```

##### ▶ 一般的なRコード

```{r}
Confint(RegModel_1, level = 0.95)
```

`Confint()` は `car` パッケージの関数である。


### 5 複数の説明変数を持つ市場反応分析：重回帰モデル

#### 5.1 価格と販売促進の効果

##### ▶ Rコマンダーによって生成されたコード（p. 98）

```{r}
#| eval: false
RegModel.2 <- lm(売上~価格+販促, data=Dataset)
summary(RegModel.2)
```

##### ▶ 一般的なRコード

```{r}
RegModel_2 <- lm(売上数量 ~ 価格 + 販促, data = Dataset)
summary(RegModel_2)
```

::: {.callout-warning collapse="false" icon="false"}
## 誤植

p. 100

- （誤）適合度が0.08程度
- （正）適合度が0.008程度
:::

### 6 弾力性測定モデル

#### 6.1 交差価格弾力性による競合関係の測定

::: {.callout-warning collapse="false" icon="false"}
## 誤植

p. 106

- （誤）売上を【新しい変数名】に“LY”，【計算式】に“log(売上)”と入力する。
- （正）【新しい変数名】に“LY1”，【計算式】に“log(Y1)”と入力する。
:::

##### ▶ Rコマンダーによって生成されたコード（p. 105）

```{r}
#| eval: false
Dataset <- read.table(file.choose(), header=TRUE, stringsAsFactors=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
Dataset$LY1 <- with(Dataset, log(Y1))
Dataset$LX1 <- with(Dataset, log(X1))
Dataset$LX2 <- with(Dataset, log(X2))
RegModel.3 <- lm(LY1~LX1+LX2, data=Dataset)
summary(RegModel.3)
```

##### ▶ 一般的なRコード

```{r}
#| echo: true
#| eval: false
Dataset <- read.table(file.choose(), header = TRUE, sep = "", strip.white = TRUE)

Dataset$LY1 <- log(Dataset$Y1)
Dataset$LX1 <- log(Dataset$X1)
Dataset$LX2 <- log(Dataset$X2)

RegModel_3 <- lm(LY1 ~ LX1 + LX2, data = Dataset)
summary(RegModel_3)
```
```{r}
#| echo: false
Dataset <- read.table("../data/現代マーケティング・リサーチ〔新版〕_ウェブサポートデータ/5/yogurt.txt", header = TRUE, sep = "", strip.white = TRUE)

Dataset$LY1 <- log(Dataset$Y1)
Dataset$LX1 <- log(Dataset$X1)
Dataset$LX2 <- log(Dataset$X2)

RegModel_3 <- lm(LY1 ~ LX1 + LX2, data = Dataset)
summary(RegModel_3)
```


## 第6章 市場の発見と知覚マップ

### 4 知覚マップの作成

::: {.callout-tip collapse="false" icon="false"}
## 補足情報

本文には，表6.1は「消費者の評価調査データである」とされている。
しかし，同表は実際にはバイヤーに対する調査結果であり，詳細は以下のとおりである。

【調査の方法】  
日本経済新聞社の「小売業調査」の対象になっているスーパー162社に対し，2010年12月22日に調査票をファクスで送付，2011年1月31日までに回収した。
回収数は92社，回収率は56.8%。
調査の実施・分析は日経リサーチが担当した。  
【表中の数字の見方】  
せんべい類を扱うバイヤーに5点満点でメーカーとブランドの総合評価をつけてもらい，その合計得点からランキングを作成した。
採点項目の数字は，メーカーまたはブランドを評価できると回答したバイヤーの割合（%）を表す。  
<div style="text-align: right;">
**（出所：『日経MJ（流通新聞）』2011年2月13日，p. 2）**
</div>
:::

### 5 Rコマンダーでの手順

##### ▶ Rコマンダーによって生成されたコード（p. 119）

```{r}
#| eval: false
Dataset <- read.table("clipboard", header=TRUE, stringsAsFactors=TRUE, sep="¥t", na.strings="NA", dec=".", strip.white=TRUE)
local({
  .FA <- factanal(~キャンペーンイベント+パッケージデザイン+広告宣伝+素材栄養素+味, factors=2, rotation="varimax", scores="regression", data=Dataset)
  print(.FA)
  Dataset <<- within(Dataset, {
    F2 <- .FA$scores[,2]
    F1 <- .FA$scores[,1]
  })
})
scatterplot(F2~F1, regLine=FALSE, smooth=FALSE, id=list(method='identify'), boxplots=FALSE, xlab="マーケティング因子", ylab="製品因子", data=Dataset)
```

##### ▶ 一般的なRコード

```{r}
#| echo: true
#| eval: false
library(car)

Dataset <- read.csv("clipboard", header = TRUE, sep = "¥t")

FA <- factanal(
  ~ キャンペーンイベント + パッケージデザイン + 広告宣伝 + 素材栄養素 + 味,
  factors = 2,
  rotation = "varimax",
  scores = "regression",
  data = Dataset
)
print(FA)

Dataset$F1 <- FA$scores[, 1]
Dataset$F2 <- FA$scores[, 2]

rownames(Dataset) <- Dataset$製品名

scatterplot(
  F2 ~ F1,
  regLine = FALSE,
  smooth = FALSE,
  id = list(method = 'identify'),
  boxplots = FALSE,
  xlab = "マーケティング因子",
  ylab = "製品因子",
  data = Dataset
)
```
```{r}
#| echo: false
#| message: false
library(car)

Dataset <- read.csv("../data/現代マーケティング・リサーチ〔新版〕_ウェブサポートデータ/6/senbei.txt", header = TRUE, sep = "\t")

FA <- factanal(~ キャンペーンイベント + パッケージデザイン + 広告宣伝 + 素材栄養素 + 味, factors = 2, rotation = "varimax", scores = "regression", data = Dataset, rownames = 1)
print(FA)

Dataset$F1 <- FA$scores[, 1]
Dataset$F2 <- FA$scores[, 2]

rownames(Dataset) <- Dataset$製品名

scatterplot(
  F2 ~ F1,
  regLine = FALSE,
  smooth = FALSE,
# id = list(method = 'identify'),
  boxplots = FALSE,
  xlab = "マーケティング因子",
  ylab = "製品因子",
  data = Dataset
)
text(Dataset$F1, Dataset$F2, labels = Dataset$製品名, pos = 4, cex = 1)
```

1つの関数が長い場合は，引数のカンマの後で改行した方が見やすいため，コードを書く際に改行を入れるのが一般的である。
このとき，改行した行の先頭にはスペースを2つ入れる。

なお，クリップボードからデータを読むコードはOSによって異なる。
上に示したコードはWindowsの場合であり，macOSの場合，`Dataset <- read.csv(pipe("pbpaste"), header = TRUE, sep = "\t")` とする。
また，タブを表す記号 `¥t` はWindowsの場合であり，macOSでは `\t` とする。

さらに，本文の指示通りだと，図6.6の知覚マップには製品名ではなく，データフレーム `Dataset` の行番号が表示されることになる。
知覚マップ上に製品名を表示するには，`rownames(Dataset) <- Dataset$製品名` を追加するか，あるいは，`read.csv()` の引数に `row.names = 1` を指定する必要がある，

### 6 その他の問題

#### 6.2 共通因子数の設定

##### ▶ Rコマンダーによって生成されたコード（p. 84）

```{r}
#| eval: false
local({
  .PC <- princomp(~キャンペーンイベント+パッケージデザイン+広告宣伝+素材栄養素+味, cor=TRUE, data=Dataset)
  cat("\nComponent loadings:\n")
  print(unclass(loadings(.PC)))
  cat("\nComponent variances:\n")
  print(.PC$sd^2)
  cat("\n")
  print(summary(.PC))
  screeplot(.PC)

})
```

##### ▶ 一般的なRコード

```{r}
PC <- princomp( ~ キャンペーンイベント + パッケージデザイン + 広告宣伝 + 素材栄養素 + 味, cor = TRUE, data = Dataset)

result <- list(
  "Component Loadings" = unclass(loadings(PC)),
  "Component Variances" = PC$sd^2,
  "Summary" = summary(PC)
)

print(result)

screeplot(PC)
screeplot(PC, type = "lines")
```

スクリープロットを描く際，`screeplot(PC)` の引数として `type = "lines"` を指定すると折れ線グラフになり，こちらが一般的に用いられる。

また，主成分分析を使わずに相関行列の固有値を計算し，スクリープロットを描く方法もある。
因子分析の際にはこの方法が使われることがある。

```{r}
cor_matrix <- cor(Dataset[, c("キャンペーンイベント", "パッケージデザイン", "広告宣伝", "素材栄養素", "味")])
ev <- eigen(cor_matrix)$values

plot(ev, type = "b", main = "スクリープロット", xlab = "因子数", ylab = "固有値", pch = 19)
abline(h = 1, col = "red", lty = 2)
```

さらに，`psych` パッケージには簡単にスクリープロットを描く関数が用意されている。

```{r}
#| eval: false
library(psych)

fa.parallel(cor_matrix, n.obs = nrow(Dataset), fa = "fa")
```
```{r}
#| echo: false
#| message: false
library(psych)
```
```{r}
#| echo: false
fa.parallel(cor_matrix, n.obs = nrow(Dataset), fa = "fa")
```

`fa.parallel()` は，単なる固有値のプロットではなく，実データの固有値とランダムデータから計算された固有値を比較するものである。

### 7 サブマーケットと市場構造

##### ▶ Rコマンダーによって生成されたコード（p. 84）

```{r}
#| eval: false
HClust.1 <- hclust(dist(model.matrix(~-1 + F1+F2, Dataset)) , method= "ward")
plot(HClust.1, main= "Cluster Dendrogram for Solution HClust.1", xlab= "Observation Number in Data Set Dataset", sub="Method=ward; Distance=euclidian")
```

##### ▶ 一般的なRコード

```{r}
#| echo: true
#| eval: true
dist_1 <- dist(Dataset[, c("F1", "F2")], method = "euclidean")
HClust_1 <- hclust(dist_1, method = "ward.D2")

plot(
  HClust_1,
  main = "Cluster Dendrogram for Solution HClust_1",
  xlab = "Observation Number in Data Set Dataset",
  sub = "Method=ward.D2; Distance=euclidean"
)
```

ウォード法は `ward` や `ward.D` ではなく，`ward.D2` を指定する。
詳細な説明は関数 `hclust()` の[ヘルプ](https://stat.ethz.ch/R-manual/R-patched/library/stats/html/hclust.html){target="_blank"}を参照のこと。

なお，知覚マップのところで `rownames(Dataset) <- Dataset$製品名` を追加した場合は，図6.9とは異なり，デンドログラムに製品名が表示される。
製品名ではなく番号を使ってデンドログラムを描くには，次のコードを実行する。

```{r}
#| echo: true
#| eval: true
rownames(Dataset) <- 1:nrow(Dataset)

dist_1 <- dist(Dataset[, c("F1", "F2")], method = "euclidean")
HClust_1 <- hclust(dist_1, method = "ward.D2")

plot(
  HClust_1,
  main = "Cluster Dendrogram for Solution HClust_1",
  xlab = "Observation Number in Data Set Dataset",
  sub = "Method=ward.D2; Distance=euclidean"
)
```

以下は，図6.10の作図のためのコードである。
なお，クラスター分析に `ward.D2` を使用しているため，クラスター間距離が本書の記述とは異なる。

```{r}
#| warning: false
Dataset$Cluster <- as.factor(cutree(HClust_1, h = 3))

par(mfrow = c(1, 2))

plot(
  Dataset$F1, Dataset$F2,
  col = as.numeric(Dataset$Cluster),
  pch = 16,
  xlab = "マーケティング因子", ylab = "製品因子",
  main = "クラスター間距離3"
)

text(Dataset$F1, Dataset$F2, labels = Dataset$製品名, pos = 4, cex = 1)

for (k in unique(Dataset$Cluster)) {
  dataEllipse(
    Dataset$F1[Dataset$Cluster == k],
    Dataset$F2[Dataset$Cluster == k],
    add = TRUE, col = k, lty = 2,
    levels = 0.5)
}

Dataset$Cluster <- as.factor(cutree(HClust_1, h = 1))

plot(
  Dataset$F1, Dataset$F2,
  col = as.numeric(Dataset$Cluster),
  pch = 16,
  xlab = "マーケティング因子", ylab = "製品因子",
  main = "クラスター間距離1"
)

text(Dataset$F1, Dataset$F2, labels = Dataset$製品名, pos = 4, cex = 1)

for (k in unique(Dataset$Cluster)) {
  cluster_data <- Dataset[Dataset$Cluster == k, c("F1", "F2")]

  if (nrow(cluster_data) > 1) {
    dataEllipse(
      cluster_data$F1,
      cluster_data$F2,
      add = TRUE, col = k, lty = 2,
      levels = 0.5)
  }
}
```

`dataEllipse()` はデータのばらつきをもとに楕円を描くため，2点しかないと警告が出て，直線が描かれる点に注意が必要である。

図を横に並べて表示する設定を行ったため，次のコードを実行してデフォルトの設定に戻しておく。

```{r}
par(mfrow = c(1, 1))
```


## 第7章 市場セグメンテーション

### 5 Rコマンダーによる市場セグメンテーション

#### 5.2 因子分析

::: {.callout-warning collapse="false" icon="false"}
## 誤植

p. 153

誤植というより，おそらく `Rcmdr` のバージョン違いにより，出力結果が異なっている可能性がある。図7.8，図7.9の通り実行しても，エラーになってしまう。以下の「手入力するコード」の部分を実行すると，本書の意図通りになるはずである（1行目のエラーは避けられない）。
:::

##### ▶ Rコマンダーによって生成されたコード（p. 149）

```{r}
#| eval: false
Dataset <- read.table(file.choose(), header=TRUE, stringsAsFactors=TRUE, 
  sep=",", na.strings="NA", dec=".", strip.white=TRUE)
local({
  .FA <- factanal(~q1+q2+q3+q4+q5+q6+q7+q8+q9+q10+q11+q12+q13+q14+q15+q16+q17+q18+q19+q20+q21+q22+q23+q24+q25+q26+q27, factors=4, 
  rotation="varimax", scores="regression", data=Dataset)
  print(.FA)
  Dataset <<- within(Dataset, {
    F4 <- .FA$scores[,4]
    F3 <- .FA$scores[,3]
    F2 <- .FA$scores[,2]
    F1 <- .FA$scores[,1]
  })
})
```

##### ▶ 手入力するコード

```{r}
#| eval: false
remove(.FA)
.FA <- factanal(~q1+q2+q3+q4+q5+q6+q7+q8+q9+q10+q11+q12+q13+q14+q15+q16+q17+q18+q19+q20+q21+q22+q23+q24+q25+q26+q27, factors=4, rotation="varimax", scores="regression", data=Dataset)
.FA
Dataset$FA1 <- .FA$scores[,1]
Dataset$FA2 <- .FA$scores[,2]
Dataset$FA3 <- .FA$scores[,3]
Dataset$FA4 <- .FA$scores[,4]
print(.FA,cutoff=0,sort=TRUE)
```

##### ▶ 一般的なRコード

```{r}
#| echo: true
#| eval: false
Dataset <- read.csv(file.choose(), header = TRUE)

FA <- factanal(
  ~ q1 + q2 + q3 + q4 + q5 + q6 + q7 + q8 + q9 + q10 + q11 + q12 + q13 + q14 + q15 + q16 + q17 + q18 + q19 + q20 + q21 + q22 + q23 + q24 + q25 + q26 + q27,
  factors = 4,
  rotation = "varimax",
  scores = "regression",
  data = Dataset
)
print(FA)
```
```{r}
#| echo: false
#| message: false
Dataset <- read.csv("../data/現代マーケティング・リサーチ〔新版〕_ウェブサポートデータ/7/seg.txt", header = TRUE)

FA <- factanal(
  ~ q1 + q2 + q3 + q4 + q5 + q6 + q7 + q8 + q9 + q10 + q11 + q12 + q13 + q14 + q15 + q16 + q17 + q18 + q19 + q20 + q21 + q22 + q23 + q24 + q25 + q26 + q27,
  factors = 4,
  rotation = "varimax",
  scores = "regression",
  data = Dataset
)
print(FA)
```
```{r}
Dataset$F1 <- FA$scores[, 1]
Dataset$F2 <- FA$scores[, 2]
Dataset$F3 <- FA$scores[, 3]
Dataset$F4 <- FA$scores[, 4]

print(FA, cutoff = 0, sort = TRUE)
```

#### 5.3 クラスター分析

::: {.callout-warning collapse="false" icon="false"}
## 誤植

p. 153

- （誤）入力としてF1〜F4（【変数（1つ以上選択）】）を指定し，クラスター数は4つとした。
- （正）入力としてF1〜F4（【変数（1つ以上選択）】）を指定し，クラスター数は4つとした。さらに，【オプション】タブでは「データセットにクラスタを割り当てる」にチェックを入れる。最後に，OKをクリックする。
:::

##### ▶ Rコマンダーによって生成されたコード（p. 153）

```{r}
#| eval: false
.cluster <-  KMeans(model.matrix(~-1 + F1 + F2 + F3 + F4, Dataset), centers = 4, iter.max = 10, num.seeds = 10)
.cluster$size # Cluster Sizes
.cluster$centers # Cluster Centroids
.cluster$withinss # Within Cluster Sum of Squares
.cluster$tot.withinss # Total Within Sum of Squares
.cluster$betweenss # Between Cluster Sum of Squares
biplot(princomp(model.matrix(~-1 + F1 + F2 + F3 + F4, Dataset)), xlabs = as.character(.cluster$cluster))
Dataset$KMeans <- assignCluster(model.matrix(~-1 + F1 + F2 + F3 + F4, Dataset), Dataset, .cluster$cluster)
remove(.cluster)
local({
  .Table <- with(Dataset, table(KMeans))
  cat("\ncounts:\n")
  print(.Table)
  cat("\npercentages:\n")
  print(round(100*.Table/sum(.Table), 2))
})
library(abind, pos=16)
library(e1071, pos=17)
numSummary(Dataset[,c("F1", "F2", "F3", "F4"), drop=FALSE], groups=Dataset$KMeans, statistics=c("mean"), quantiles=c(0,.25,.5,.75,1))
```

##### ▶ 一般的なRコード

```{r}
#| echo: true
#| eval: true
set.seed(10)

cluster <- kmeans(Dataset[, c("F1", "F2", "F3", "F4")], centers = 4, iter.max = 10, nstart = 10)

result <- list(
  "Cluster Sizes" = cluster$size,
  "Cluster Centroids" = cluster$centers,
  "Within Cluster Sum of Squares" = cluster$withinss,
  "Total Within Sum of Squares" = cluster$tot.withinss,
  "Between Cluster Sum of Squares" = cluster$betweenss
)

print(result)
```

主成分分析のバイプロットを描画し，データポイントを _K-means_ 法によるクラスター分析の結果に基づいてラベル付けする。

```{r}
biplot(princomp(Dataset[, c("F1", "F2", "F3", "F4")]), xlabs = as.character(cluster$cluster))
```

_K-means_ 法によるクラスター分析の結果を確認する。

```{r}
Dataset$KMeans <- cluster$cluster

table(Dataset$KMeans)
round(prop.table(table(Dataset$KMeans)) * 100, 2)
split_data <- split(Dataset[, c("F1", "F2", "F3", "F4")], Dataset$KMeans)
result <- data.frame(セグメント = names(split_data),
                     t(sapply(split_data, colMeans)),
                     サンプルサイズ = sapply(split_data, nrow))
print(result)
```

`print(result)` の出力結果の行の並び順が表7.9と異なっていても問題ない。

#### 5.4 セグメントのプロファイリング

表7.10〜表7.13もRを使って作成できる。

```{r}
split_data <- split(Dataset, Dataset$KMeans)

gender <- round(prop.table(sapply(split_data, function(df) table(df$性別)), margin = 2) * 100, 1)
gender_table <- data.frame(セグメント = names(split_data), t(gender))
names(gender_table)[-1] <- c("男性", "女性")
gender_table

data.frame(セグメント = names(split_data),
           平均年齢 = sapply(split_data, function(df) round(mean(df$年齢), 1)))

data.frame(セグメント = names(split_data),
           投資経験年数 = sapply(split_data, function(df) round(mean(df$投資経験年数), 1)))

transaction <- round(prop.table(sapply(split_data, function(df) table(df$取引形態)), margin = 2) * 100, 1)
transaction_table <- data.frame(セグメント = names(split_data), t(transaction))
names(transaction_table)[-1] <- c("対面取引", "インターネット取引", "対面とインターネットの併用")
transaction_table
```

さらに，図7.4もRを使って作成できる。

```{r}
gender_counts <- table(Dataset$性別)
names(gender_counts) <- c("男性", "女性") 
barplot(gender_counts)

Dataset$年齢区分 <- cut(Dataset$年齢, 
                       breaks = seq(20, max(Dataset$年齢) + 5, by = 5), 
                       right = FALSE)
barplot(table(Dataset$年齢区分), 
        col = "skyblue",
        las = 2)
```

細かい調整が必要な場合は，自分でカスタマイズ可能である。
例えば，棒グラフの上に数値を表示したい場合は，次のようにする。

```{r}
bar_positions <- barplot(gender_counts, ylim = c(0, max(gender_counts) * 1.2), col = adjustcolor(c("blue", "red"), alpha.f = .5))
text(bar_positions, gender_counts, labels = gender_counts, pos = 3, cex = 1.2, col = "black")
```

`ggplot2` パッケージを使えば，複雑なグラフも簡単に作成できる。

```{r}
#| echo: true
#| eval: false
library(ggplot2)

Dataset$性別f <- factor(Dataset$性別, levels = c(1, 2), labels = c("男性", "女性"))

ggplot(Dataset, aes(x = 性別f, fill = 性別f)) +
  geom_bar() +
  geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5, size = 3) +
  labs(x = "性別", y = "人数") +
  theme_bw() +
  theme(legend.position = "none")
```
```{r}
#| message: false
#| echo: false
#| eval: true
library(ggplot2)

Dataset$性別f <- factor(Dataset$性別, levels = c(1, 2), labels = c("男性", "女性"))

ggplot(Dataset, aes(x = 性別f, fill = 性別f)) +
  geom_bar() +
  geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5, size = 3) +
  labs(x = "性別", y = "人数") +
  theme_bw() +
  theme(legend.position = "none") +
  theme(text = element_text(family = "HiraKakuProN-W3"))
```
